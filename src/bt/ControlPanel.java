/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bt;

import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.SQLException;
import java.text.MessageFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import org.joda.time.DateTime;
import org.joda.time.format.DateTimeFormat;

/**
 *
 * @author gabor_hanacsek
 */
public class ControlPanel extends javax.swing.JDialog {

    /**
     * Creates new form LoaderPanel
     */
    int x;
    int y;

    MainWindow m;
    //a segédlethez kell
    ArrayList<PlannObject> polista = new ArrayList<>();
    Date combodate;

    public ControlPanel(java.awt.Frame parent, boolean modal, MainWindow m) {
        super(parent, modal);

        initComponents();
        this.jTable1.setDefaultRenderer(Object.class, new LoaderRenderer(this));
        jScrollPane1.getViewport().setOpaque(false);
        jScrollPane2.getViewport().setOpaque(false);
        this.m = m;
        //combo action
        jComboBox1.addItemListener(new ItemListener() {

            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    segedletLeker();
                }
            }
        });
        jComboBox2.addItemListener(new ItemListener() {

            @Override
            public void itemStateChanged(ItemEvent e) {
                if (e.getStateChange() == ItemEvent.SELECTED) {
                    segedletLeker();
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new BackgroundPanel(Variables.background.controlpanelkulso);
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new BackgroundPanel(Variables.background.controlpanelbelso);
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jPanel3 = new BackgroundPanel(Variables.background.controlpanelbelso);
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel5 = new BackgroundPanel(Variables.background.controlpanelbelso);
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Control Panel  ^ JOB Start pozíció"));

        jTabbedPane1.setMinimumSize(new java.awt.Dimension(0, 0));
        jTabbedPane1.setOpaque(true);
        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });

        jPanel1.setAutoscrolls(true);

        jScrollPane1.setOpaque(false);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "JOB", "PartNumber", "WorkStation", "Qty", "Start date", "CT (DB/h)", "Komment", "M"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, true, true, true, true, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setMinimumSize(new java.awt.Dimension(50, 50));
        jTable1.setOpaque(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(135);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(135);
            jTable1.getColumnModel().getColumn(2).setPreferredWidth(135);
            jTable1.getColumnModel().getColumn(3).setPreferredWidth(80);
            jTable1.getColumnModel().getColumn(4).setPreferredWidth(135);
            jTable1.getColumnModel().getColumn(5).setPreferredWidth(80);
            jTable1.getColumnModel().getColumn(6).setPreferredWidth(135);
            jTable1.getColumnModel().getColumn(7).setResizable(false);
            jTable1.getColumnModel().getColumn(7).setPreferredWidth(5);
        }

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 51, 51));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/tervplus.png"))); // NOI18N
        jLabel2.setToolTipText("Tervek hozzáadása");
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 51, 51));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/tablatorles.png"))); // NOI18N
        jLabel3.setToolTipText("Tábla törlése!");
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });

        jTextField1.setText("Prefix+évhét");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/tervplus.png"))); // NOI18N
        jLabel4.setText("JOB adagoló!");
        jLabel4.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 596, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Tervek hozzáadása", jPanel1);

        jPanel3.setAutoscrolls(true);

        jScrollPane2.setOpaque(false);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "JOB", "TAB", "TAB", "PN", "TAB", "TAB", "QTY", "TAB", "RELEASED", "TAB", "DATETIME", "*DN"
            }
        ));
        jTable2.setOpaque(false);
        jScrollPane2.setViewportView(jTable2);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 866, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 339, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("Data loader", jPanel3);

        jPanel5.setAutoscrolls(true);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setBorder(javax.swing.BorderFactory.createTitledBorder("Műszakvezetői komment:"));
        jTextArea1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextArea1KeyReleased(evt);
            }
        });
        jScrollPane5.setViewportView(jTextArea1);

        jScrollPane6.setBorder(javax.swing.BorderFactory.createTitledBorder("Adatok a szakban:"));

        jTextPane1.setContentType("text/html"); // NOI18N
        jScrollPane6.setViewportView(jTextPane1);
        jTextPane1.getAccessibleContext().setAccessibleDescription("");

        jScrollPane7.setBorder(javax.swing.BorderFactory.createTitledBorder("Címlista:"));

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane7.setViewportView(jTextArea2);

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/envelope.png"))); // NOI18N
        jLabel7.setToolTipText("Levél küldése!");
        jLabel7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel7MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane7)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 578, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
                    .addComponent(jScrollPane6)))
        );

        jTabbedPane1.addTab("Műszakjelentés", jPanel5);

        jPanel4.setAutoscrolls(true);

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cella", "StartDate", "PartNumber", "Job", "WorkStation", "Elm/Terv", "PlannerKomment", "Komment", "Anyaghiány", "Felelős", "Tól-Ig"
            }
        ));
        jTable3.setCellSelectionEnabled(true);
        jScrollPane3.setViewportView(jTable3);
        if (jTable3.getColumnModel().getColumnCount() > 0) {
            jTable3.getColumnModel().getColumn(5).setMinWidth(70);
            jTable3.getColumnModel().getColumn(5).setPreferredWidth(70);
            jTable3.getColumnModel().getColumn(5).setMaxWidth(70);
        }

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/printer.png"))); // NOI18N
        jLabel6.setToolTipText("Nyomtat");
        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel6MouseClicked(evt);
            }
        });

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Elmaradás", "Aktuális terv" }));

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pictures/addrow.png"))); // NOI18N
        jLabel8.setToolTipText("Sor hozzáadása");
        jLabel8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel8MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 866, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel4Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jComboBox1, jComboBox2});

        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jComboBox1)
                                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel8)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Segédlet", jPanel4);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(897, 429));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        // TODO add your handling code here:
        this.setLocation(evt.getXOnScreen() - x, evt.getYOnScreen() - y);
    }//GEN-LAST:event_formMouseDragged

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        // TODO add your handling code here:
        x = evt.getX();
        y = evt.getY();
    }//GEN-LAST:event_formMousePressed

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
        // ha kiválaztjuk a dateloader fület
        if (jTabbedPane1.getSelectedIndex() == 1) {
            dataLoaderDataMaker();

        } //ha kiválasztjuk a műszakjelentés fület
        else if (jTabbedPane1.getTitleAt(jTabbedPane1.getSelectedIndex()).equals("Műszakjelentés")) {
            //bekerjuk a cimlistat
            cimlistabeker();
            muszakjelentesToControlPanel();

        } else if (jTabbedPane1.getTitleAt(jTabbedPane1.getSelectedIndex()).equals("Segédlet")) {

            segedlet();

        }

    }//GEN-LAST:event_jTabbedPane1StateChanged

    private void dataLoaderDataMaker() {
        DateTime now = new org.joda.time.DateTime();
        String pattern = "dd-MMM-yyyy 00:00:00";
        org.joda.time.format.DateTimeFormatter formatter = DateTimeFormat.forPattern(pattern);
        String most = formatter.print(now);
        //a dataloader adatokat állítja össze a backendsheeten található po-kbol ahol a státus a nem létezik 42 q ban
        //kiszedjük a be sheetet
        BeSheet b = (BeSheet) m.jTabbedPane1.getComponentAt(m.jTabbedPane1.getSelectedIndex());
        //kell egy táblamodell is és ki kel nullázni
        DefaultTableModel model = new DefaultTableModel();
        model = (DefaultTableModel) jTable2.getModel();
        model.setRowCount(0);
        ArrayList<String> polista = new ArrayList<>();
        //végigjárjuk az elemeit és ha po 

        for (int i = 0; i < b.jPanel1.getComponentCount(); i++) {

            if (b.jPanel1.getComponent(i) instanceof PlannObject) {

                PlannObject po = (PlannObject) b.jPanel1.getComponent(i);
                //ha a po státusza notexist
                if (po.getStat().equals(Variables.status.NotExists)) {
                    //akkor végigjárjuk még egyszer ha nincs a listában és összeadjuk, a darabot
                    if (!polista.contains(po.getPn() + po.getJob() + po.getWorkStation())) {
                        int osszeg = 0;
                        for (int n = 0; n < b.jPanel1.getComponentCount(); n++) {

                            if (b.jPanel1.getComponent(n) instanceof PlannObject) {

                                PlannObject po1 = (PlannObject) b.jPanel1.getComponent(n);
                                if (po1.getJob().equals(po.getJob()) && po1.getPn().equals(po.getPn()) && po1.getWorkStation().equals(po.getWorkStation())) {

                                    osszeg += po1.getTerv();
                                }

                            }
                        }
                        polista.add(po.getPn() + po.getJob() + po.getWorkStation());
                        model.addRow(new Object[]{po.getJob(), "TAB", "TAB", po.getPn(), "TAB", "TAB", osszeg, "TAB", "RELEASED", "TAB", most, "*DN"});
                    }

                }

            }

        }

        jTable2.setModel(model);

    }

    public void sendMail() {
        //a muszakjelentes elkuldese
        BeSheet b = (BeSheet) m.jTabbedPane1.getComponentAt(m.jTabbedPane1.getSelectedIndex());
        //megszerkesztjuk a targyat
        String subject = "Muszakjelentes " + m.jTabbedPane1.getTitleAt(m.jTabbedPane1.getSelectedIndex()) + " " + b.vtstartime;
        //kell egy levelkuldo
        Levelkuldes l = new Levelkuldes(subject, jTextPane1.getText() + b.muszakjelentes, jTextArea2.getText(), "Muszakjelentes@sanmina.com");
        l.start();

    }


    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        //tervek hozzáadása
//csak azokat adjuk hozzá, amik benne vannak az adatokban!! (pn,ws,ciklusidő)
        if (jLabel2.isEnabled()) {
            addTerv();
        }

    }//GEN-LAST:event_jLabel2MouseClicked

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // ha ráklikkelünk a plusz gombra, adatok felvitele

        if (jTable1.getSelectedColumn() == 7) {

//ha muszakvezeto vagy megtekinto akkor kirjuk h nincs joga es elbucsuzunk
            if (Variables.jogosultsag == 2 || Variables.jogosultsag == 0) {
                JOptionPane.showMessageDialog(m,
                        "Nem megfelelő a jogosultsági szinted az adatok módosításához!",
                        "Feltöltési hiba!",
                        JOptionPane.ERROR_MESSAGE);
                return;

            }

            PlanConnect pc = null;
            try {
                pc = new PlanConnect();

//fel kell tolteni a pn-t a ws-t , ciklusidőt és a kommentet majd
//pn feltoltese
                String insertquery = "";
                try {
                    insertquery = "insert ignore tc_bepns (partnumber) values ('" + jTable1.getValueAt(jTable1.getSelectedRow(), 1).toString().trim() + "')";
                    pc.feltolt(insertquery);
                } catch (Exception e) {
                    // m.error.setVisible(true, "Nem adtál meg PN-t, így nem tudjuk feltölteni!");
                    JOptionPane.showMessageDialog(m,
                            "Nem adtál meg PN-t, így nem tudjuk feltölteni!",
                            "Feltöltési hiba!",
                            JOptionPane.ERROR_MESSAGE);
                    Starter.e.sendMessage(e);
                    return;
                }
//ws feltoltese
                try {
                    insertquery = "insert ignore tc_bestations (workstation) values ('" + jTable1.getValueAt(jTable1.getSelectedRow(), 2).toString().trim() + "')";
                    pc.feltolt(insertquery);
                } catch (Exception e) {
                    Starter.e.sendMessage(e);
//                    m.error.setVisible(true, "Nem adtál meg WS-t, így nem tudjuk feltölteni!");
                    JOptionPane.showMessageDialog(m,
                            "Nem adtál meg WS-t, így nem tudjuk feltölteni!",
                            "Feltöltési hiba!",
                            JOptionPane.ERROR_MESSAGE);
                    return;
                }
//prodmatrix feltoltese
                try {
                    insertquery = "insert ignore tc_prodmatrix (id_tc_bepns,id_tc_becells,id_tc_bestations,ciklusido,pk) values ((select tc_bepns.idtc_bepns from tc_bepns where tc_bepns.partnumber = '" + jTable1.getValueAt(jTable1.getSelectedRow(), 1).toString().trim() + "') , (select tc_becells.idtc_cells from tc_becells where tc_becells.cellname = '" + MainWindow.jTabbedPane1.getTitleAt(MainWindow.jTabbedPane1.getSelectedIndex()) + "'), (select tc_bestations.idtc_bestations from tc_bestations where tc_bestations.workstation = '" + jTable1.getValueAt(jTable1.getSelectedRow(), 2).toString().trim() + "'), '" + Double.parseDouble(jTable1.getValueAt(jTable1.getSelectedRow(), 5).toString()) + "',(concat((select tc_bepns.idtc_bepns from tc_bepns where tc_bepns.partnumber = '" + jTable1.getValueAt(jTable1.getSelectedRow(), 1).toString().trim() + "') , (select tc_becells.idtc_cells from tc_becells where tc_becells.cellname = '" + MainWindow.jTabbedPane1.getTitleAt(MainWindow.jTabbedPane1.getSelectedIndex()) + "'), (select tc_bestations.idtc_bestations from tc_bestations where tc_bestations.workstation = '" + jTable1.getValueAt(jTable1.getSelectedRow(), 2).toString().trim() + "'))))\n"
                            + "on duplicate key update tc_prodmatrix.ciklusido = values(ciklusido)";
                    pc.feltolt(insertquery);
                } catch (Exception e) {
                    Starter.e.sendMessage(e);
//                    m.error.setVisible(true, "<html>Nem adtál meg ciklusidőt, így nem tudjuk feltölteni!</html>");
                    JOptionPane.showMessageDialog(m,
                            "Nem adtál meg ciklusidőt, így nem tudjuk feltölteni!",
                            "Feltöltési hiba!",
                            JOptionPane.ERROR_MESSAGE);
                    return;

                }
//updatelni kell a kommentet is
                try {
                    insertquery = "insert ignore pn_data (PartNumber, Comment) values ('" + jTable1.getValueAt(jTable1.getSelectedRow(), 1).toString().trim() + "','" + jTable1.getValueAt(jTable1.getSelectedRow(), 6).toString().trim() + "') on duplicate key update pn_data.Comment = values(Comment)";
                    pc.feltolt(insertquery);
                } catch (Exception e) {
                    e.printStackTrace();
                    Starter.e.sendMessage(e);
                }
                adatlekerBeSheetrol();
                MainWindow.pnCommentLeker();
                jTable1.repaint();

//                m.okpanel.setVisible(true, "Az adatokat felvittük!");
                JOptionPane.showMessageDialog(m,
                        "Az adatokat felvittük!");
            } catch (Exception e) {
                e.printStackTrace();
                Starter.e.sendMessage(e);
            } finally {
                try {
                    pc.kinyir();
                } catch (Exception e) {
                    e.printStackTrace();
                    Starter.e.sendMessage(e);
                }

            }
            //frissítjük az adatokat a backendsheeten
            BeSheet b = (BeSheet) m.jTabbedPane1.getComponentAt(m.jTabbedPane1.getSelectedIndex());
            b.adatleker(b.getName());

        }


    }//GEN-LAST:event_jTable1MouseClicked

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        tablaTorol();
    }//GEN-LAST:event_jLabel3MouseClicked

    public void muszakjelentesToBesheets() {
//a muszakjelentes szoveget eltaroljuk a sheeten
        BeSheet b = (BeSheet) m.jTabbedPane1.getComponentAt(m.jTabbedPane1.getSelectedIndex());
        b.muszakjelentes = "<html><br><h2>További megjegyzés: </h2><br>" + jTextArea1.getText() + "</html>";

    }

    //a muszakjelentes szoveget visszakerjuk a sheetrol
    public void muszakjelentesToControlPanel() {
        try {
            BeSheet b = (BeSheet) m.jTabbedPane1.getComponentAt(m.jTabbedPane1.getSelectedIndex());
            jTextArea1.setText(b.muszakjelentes);
        } catch (Exception e) {
            e.printStackTrace();
            Starter.e.sendMessage(e);
        }

    }


    private void jTextArea1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea1KeyReleased
        // a muszakjelentes szoveget eltaroljuk a besheeten
        muszakjelentesToBesheets();
    }//GEN-LAST:event_jTextArea1KeyReleased

    private void jLabel7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseClicked
        //muszakjlelentes elkuldese
        sendMail();
        //default title and icon
        JOptionPane.showMessageDialog(m,
                "A levelet elküldtük!");
    }//GEN-LAST:event_jLabel7MouseClicked

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked
        //job adagoló
        Thread t = new Thread(new JobAdagolo((BeSheet) m.jTabbedPane1.getComponentAt(m.jTabbedPane1.getSelectedIndex())));
        t.start();
    }//GEN-LAST:event_jLabel4MouseClicked

    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseClicked
        //nyomtatás

        MessageFormat header = new MessageFormat("Report print");
        MessageFormat footer = new MessageFormat("Page{0,number,integer}");

        try {

            jTable3.print(JTable.PrintMode.FIT_WIDTH, header, footer);

        } catch (java.awt.print.PrinterException e) {

            System.err.format("Cannot print", e.getMessage());

        }
    }//GEN-LAST:event_jLabel6MouseClicked

    private void jLabel8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel8MouseClicked
        // sor hozzáadása a segédlet táblához
        DefaultTableModel model = new DefaultTableModel();
        model = (DefaultTableModel) jTable3.getModel();
        model.addRow(new Object[]{"","","","","","","","","","",""});
        jTable3.setModel(model);
    }//GEN-LAST:event_jLabel8MouseClicked

    public void segedletLeker() {
//ha az elmaradás van kiválasztva

        if (jComboBox2.getSelectedItem().toString().equals("Elmaradás")) {
            DefaultTableModel model = new DefaultTableModel();
            model = (DefaultTableModel) jTable3.getModel();
            model.setRowCount(0);
            try {
                //át kell alakítani dátummá a stringet amit kiválasztottunk a combo boxbol
                combodate = new SimpleDateFormat("yyyy-MM-dd hh:mm").parse(jComboBox1.getSelectedItem().toString());
            } catch (ParseException ex) {
                ex.printStackTrace();
                Starter.e.sendMessage(ex);
            }
            //bejárjuk a polistat és ha kisebb a datuma akkor betesszuk atablamodellbe
            for (PlannObject po : polista) {

                Date podate = null;
                try {
                    podate = new SimpleDateFormat("yyyy-MM-dd hh:mm").parse(po.getStartdate().toString());
                } catch (ParseException ex) {
                    ex.printStackTrace();
                    Starter.e.sendMessage(ex);
                }
                if ((podate.compareTo(combodate) < 0) && (po.getTerv() - po.getTeny() > 0)) {
                    //megnezzuk, hogy van e olyan po a listaban ahol van megvalosulas a listaban ami ugyan az a pn job ws, osszeadjuk a terveket tenyeket kivonjuk es az lesz az elmaradas
                    int osszterv = 0;
                    int osszteny = 0;
                    for (PlannObject p : polista) {
                        Date pdate = null;
                        try {
                            pdate = new SimpleDateFormat("yyyy-MM-dd hh:mm").parse(po.getStartdate().toString());
                        } catch (ParseException ex) {
                            ex.printStackTrace();
                            Starter.e.sendMessage(ex);
                        }
                        if ((pdate.compareTo(combodate) < 0) && p.getPn().equals(po.getPn()) && p.getJob().equals(po.getJob()) && p.getWorkStation().equals(po.getWorkStation())) {

                            osszterv += p.getTerv();
                            osszteny += p.getTeny();

                        }

                    }
                    if (osszterv - osszteny > 0) {
                        //összegyüjtjük az anyaghiányokat
                        String ah = "";
                        String tolig = "";
                        String felelos = "";
                        for (int n = 0; n < po.getAnyaghianylista().size(); n++) {

                            ah += po.getAnyaghianylista().get(n).pn + ", ";
                            tolig += po.getAnyaghianylista().get(n).tol.substring(0, po.getAnyaghianylista().get(n).tol.length() - 5) + " - " + po.getAnyaghianylista().get(n).ig.substring(0, po.getAnyaghianylista().get(n).ig.length() - 5) + ", ";
                            felelos += po.getAnyaghianylista().get(n).felelos + ", ";
                        }
                        if (ah.length() > 2 && tolig.length() > 2) {
                            ah = ah.substring(0, ah.length() - 2);
                            tolig = tolig.substring(0, tolig.length() - 2);
                            felelos = felelos.substring(0, felelos.length() - 2);
                        }

                        model.addRow(new Object[]{po.getbackendSheet().getName(), po.getStartdate(), po.getPn(), po.getJob(), po.getWorkStation(), osszterv - osszteny, po.getPlannerkomment(), po.getKomment(), ah, felelos, tolig});
                    }

                }

            }

            jTable3.setModel(model);
            //szelesseg beallitas
            new TablaSzelesseg(jTable3);
        } //ha az aktuális terv van kiválasztva
        else if (jComboBox2.getSelectedItem().toString().equals("Aktuális terv")) {

            DefaultTableModel model = new DefaultTableModel();
            model = (DefaultTableModel) jTable3.getModel();
            model.setRowCount(0);

            try {
                //át kell alakítani dátummá a stringet amit kiválasztottunk a combo boxbol
                combodate = new SimpleDateFormat("yyyy-MM-dd hh:mm").parse(jComboBox1.getSelectedItem().toString());
            } catch (ParseException ex) {
                ex.printStackTrace();
                Starter.e.sendMessage(ex);
            }
//bejárjuk a po listát és ha egyezik a startdate betesszuk a modellbe            
            for (PlannObject po : polista) {
                try {
                    Date pdate = new SimpleDateFormat("yyyy-MM-dd hh:mm").parse(po.getStartdate().toString());
                    if (pdate.compareTo(combodate) == 0 && po.getTerv() > 0) {
                        String ah = "";
                        String tolig = "";
                        String felelos = "";
                        for (int n = 0; n < po.getAnyaghianylista().size(); n++) {

                            ah += po.getAnyaghianylista().get(n).pn + ", ";
                            tolig += po.getAnyaghianylista().get(n).tol.substring(0, po.getAnyaghianylista().get(n).tol.length() - 5) + " - " + po.getAnyaghianylista().get(n).ig.substring(0, po.getAnyaghianylista().get(n).ig.length() - 5) + ", ";
                            felelos += po.getAnyaghianylista().get(n).felelos + ", ";
                        }
                        if (ah.length() > 2 && tolig.length() > 2) {
                            ah = ah.substring(0, ah.length() - 2);
                            tolig = tolig.substring(0, tolig.length() - 2);
                            felelos = felelos.substring(0, felelos.length() - 2);
                        }

                        model.addRow(new Object[]{po.getbackendSheet().getName(), po.getStartdate(), po.getPn(), po.getJob(), po.getWorkStation(), po.getTerv(), po.getPlannerkomment(), po.getKomment(), ah, felelos, tolig});

                    }

                } catch (ParseException ex) {
                    ex.printStackTrace();
                    Starter.e.sendMessage(ex);
                }

            }

            jTable3.setModel(model);
            //szelesseg beallitas
            new TablaSzelesseg(jTable3);

        }

    }

    public void cimlistabeker() {

        //behuzzuk a cimlistat
        String query = "SELECT Muszakjelentes.Cím FROM planningdb.Muszakjelentes";
        PlanConnect pc = null;
        //cimlista string
        String cimlista = "";
        try {
            pc = new PlanConnect();

            try {
                pc.lekerdez(query);
            } catch (Exception e) {
                e.printStackTrace();
                Starter.e.sendMessage(e);

            }

            try {
                while (pc.rs.next()) {

                    cimlista += pc.rs.getString(1) + ",\n";
                }
            } catch (SQLException e) {
                e.printStackTrace();
                Starter.e.sendMessage(e);
            }
        } catch (Exception e) {
            e.printStackTrace();
            Starter.e.sendMessage(e);
        } finally {
            try {
                pc.kinyir();
            } catch (Exception e) {
                e.printStackTrace();
                Starter.e.sendMessage(e);

            }
        }

        //levagjuk az utolso biszbaszt
        cimlista = cimlista.substring(0, cimlista.length() - 1);
        //beallitjuk a műszakjelentés szövegeként
        jTextArea2.setText(cimlista);

    }

    public void tablaTorol() {
        //kinullázunk mindent a táblán
        DefaultTableModel model = new DefaultTableModel();
        model = (DefaultTableModel) jTable1.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {

            for (int o = 0; o < model.getColumnCount(); o++) {

                model.setValueAt(null, i, o);
            }
        }

        jTable1.setModel(model);

    }

    public void addTerv() {
//a tervek hozzáadása a loaderből
        BeSheet b = (BeSheet) m.jTabbedPane1.getComponentAt(m.jTabbedPane1.getSelectedIndex());
        //végigmegyünk a loader táblán
        outerloop:
        for (int i = 0; i < jTable1.getRowCount(); i++) {
            //ha van írva pn megnezzuk, hogy van e darabszam irva, ha nincs szolunk
            try {
                if (!jTable1.getValueAt(i, 1).toString().equals("")) {
                    try {
                        Integer.parseInt(jTable1.getValueAt(i, 3).toString());
                    } catch (Exception e) {
                        //custom title, error icon
                        JOptionPane.showMessageDialog(m,
                                "Nem adtál meg darabszámot a " + (i + 1) + "-ik sorban!\n Ezt a sort nem töltjük be!",
                                "Hiba!",
                                JOptionPane.ERROR_MESSAGE);
                    }

                }
            } catch (Exception e) {
            }

            try {
//azokkal a sorokkal foglalkozunk ahol nem nulla  pn ws qty
                if (!jTable1.getValueAt(i, 1).toString().equals("") && !jTable1.getValueAt(i, 2).toString().equals("") && Integer.parseInt(jTable1.getValueAt(i, 3).toString()) > 0) {
//kiszedjük a pn-t és leellenőrizzük, hogy fel van e vive az adatok közé
                    String pn = jTable1.getValueAt(i, 1).toString().trim();
                    String ws = jTable1.getValueAt(i, 2).toString().trim();
                    String job = "";
                    String startdate = "";
                    try {
                        job = jTable1.getValueAt(i, 0).toString().trim();
                    } catch (Exception e) {
//                        e.printStackTrace();
//                        Starter.e.sendMessage(e);

                    }
                    try {
                        startdate = jTable1.getValueAt(i, 4).toString().trim();

                        //leellenőrizzük hogy a startdátum megfelelő formátumú e
                        if (!Pattern.matches("[0-9]{4}[-][0-9]{2}[-][0-9]{2}[ ][0-9]{2}[:][0-9]{2}"/*[:][0-9]{2}"*/, startdate) && !startdate.equals("")) {

                            //custom title, error icon
                            JOptionPane.showMessageDialog(m,
                                    "A Strat dátumot nem a megfelelő formátumban adtad meg! Elvárt: yyyy-MM-dd hh:mm",
                                    "Hiba",
                                    JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                    } catch (Exception e) {
//                        e.printStackTrace();
//                        Starter.e.sendMessage(e);

                    }

//ha muszakvezeto van bent, kotelezo a starttime!!!!
                    if (Variables.jogosultsag == 2 && startdate.equals("")) {

                        //custom title, error icon
                        JOptionPane.showMessageDialog(m,
                                "A Strat dátum megadása kötelező! Elvárt: yyyy-MM-dd hh:mm",
                                "Hiba",
                                JOptionPane.ERROR_MESSAGE);
                        return;

                    }
//ha muszakvezeto van bent, a terv mindenkepp nulla!!
                    int terv = 0;

                    try {
                        terv = Integer.parseInt(jTable1.getValueAt(i, 3).toString());
                    } catch (Exception e) {

                        JOptionPane.showMessageDialog(m,
                                "Darabszám felvételi hiba! Nem megfelelő számot adtál meg!",
                                "Hiba",
                                JOptionPane.ERROR_MESSAGE);
                        return;

                    }

                    if (Variables.jogosultsag == 2) {
                        terv = 0;
                    }

                    for (int c = 0; c < b.gyarthatosagiadatok.size(); c++) {

                        if (b.gyarthatosagiadatok.get(c)[0].trim().equals(pn.trim()) && b.gyarthatosagiadatok.get(c)[1].trim().equals(ws.trim())) {

//ha találunk olyan kombot ami fel van vive akkor csinálunk plann objectet
                            try {
                                PlannObject po = new PlannObject(b, 200, 75, pn.trim(), job, startdate, terv, 0, "", "", 0.00, 0, ws.trim(), Double.parseDouble(jTable1.getValueAt(i, 5).toString()), m, 0);
                                b.jPanel1.add(po);
                                po.setLocation(m.cp.getLocationOnScreen().x + b.jScrollPane2.getHorizontalScrollBar().getValue(), m.cp.getLocationOnScreen().y - 250);
                                b.repaint();

                            } catch (Exception e) {
                                e.printStackTrace();
                                Starter.e.sendMessage(e);
                                //custom title, error icon
                                JOptionPane.showMessageDialog(m,
                                        "Mem sikerült a tervek hozzáadása!\n Ellenőrizd az adatok helyességét! (zöld?)",
                                        "Hiba!",
                                        JOptionPane.ERROR_MESSAGE);

                                return;
                            }

                            continue outerloop;
                        }

                    }

//ha ide eljutunk akkor nem szerepelt ilyen adat, kiirjuk a hibát
//                    m.error.setVisible(true, "<html>A következő tétel nem kerül felvételre!<br>PN: " + pn + " WS: " + ws + "<br>Javítsd a hibát és próbáld újból!</html>");
                    JOptionPane.showMessageDialog(m,
                            "<html>A következő tétel nem kerül felvételre!<br>PN: " + pn + " WS: " + ws + "<br>Javítsd a hibát és próbáld újból!</html>",
                            "Feltöltési hiba!",
                            JOptionPane.ERROR_MESSAGE);

                }

            } catch (Exception e) {

            }
        }
        b.osszerendez();
        //beallitjuk a jogosultsagokat
        b.getM().j.kezel();

    }

    public void adatlekerBeSheetrol() {
        //a terv hozzáadásához kell
        new ExcelAdapter(jTable1, this);
        try {
//hozzáadjuk egy comboboxhoz az adatokat
            BeSheet b = (BeSheet) m.jTabbedPane1.getComponentAt(m.jTabbedPane1.getSelectedIndex());
            JComboBox<String> PncomboBox = new AutoCompleteComboBox(b.pnlist.toArray());

            JComboBox<String> WscomboBox = new AutoCompleteComboBox(b.wslist.toArray());

            TableColumn pncolumn = jTable1.getColumnModel().getColumn(1);
            pncolumn.setCellEditor(new DefaultCellEditor(PncomboBox));
            TableColumn wscolumn = jTable1.getColumnModel().getColumn(2);
            wscolumn.setCellEditor(new DefaultCellEditor(WscomboBox));
//hozzáadjuk a starttimeokat is
            JComboBox<String> StartTimeCombo = new JComboBox<>();
            StartTimeCombo.addItem("");
            for (int i = 0; i < b.jPanel2.getComponentCount(); i++) {
                if (b.jPanel2.getComponent(i) instanceof VerticalTimeline) {
                    VerticalTimeline vt = (VerticalTimeline) b.jPanel2.getComponent(i);
                    StartTimeCombo.addItem(vt.getVtstartdate());

                }

            }
            TableColumn starttimecolumn = jTable1.getColumnModel().getColumn(4);
            starttimecolumn.setCellEditor(new DefaultCellEditor(StartTimeCombo));

        } catch (Exception e) {
            e.printStackTrace();
            Starter.e.sendMessage(e);
        }
    }

    @Override
    public void setVisible(boolean b) {
        super.setVisible(b);
        adatlekerBeSheetrol();

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            Starter.e.sendMessage(e);
        }

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

            }
        });
    }

    public void segedlet() {
        polista.clear();
        //begyűjtjük az összes plannobjectet az összes sheetről
        BeSheet b = null;
        for (int n = 0; n < MainWindow.jTabbedPane1.getComponentCount(); n++) {
            b = (BeSheet) m.jTabbedPane1.getComponentAt(n/*m.jTabbedPane1.getSelectedIndex()*/);

//        ArrayList<PlannObject> polista = new ArrayList<>();
            for (int i = 0; i < b.jPanel1.getComponentCount(); i++) {
                if (b.jPanel1.getComponent(i) instanceof PlannObject) {

                    polista.add((PlannObject) b.jPanel1.getComponent(i));

                }

            }
        }

        //sorba kell rendezni a startdate alapján
        class DateSorter implements Comparator<PlannObject> {

            @Override
            public int compare(PlannObject a, PlannObject b) {
                return a.getStartdate().compareToIgnoreCase(b.getStartdate());
            }
        }

        class CellaShorter implements Comparator<PlannObject> {

            @Override
            public int compare(PlannObject a, PlannObject b) {
                return a.getbackendSheet().getName().compareToIgnoreCase(b.getbackendSheet().getName());
            }
        }

        class MultiSorter implements Comparator<PlannObject> {

            @Override
            public int compare(PlannObject a, PlannObject b) {
                int i = a.getbackendSheet().getName().compareTo(b.getbackendSheet().getName());
                if (i != 0) {
                    return i;
                }

                i = a.getStartdate().compareTo(b.getStartdate());
                return i;

            }
        }

        polista.sort(new MultiSorter());
//        polista.sort(new DateSorter());
//a legördülőt feltöltjük a vt startdatumokkal, az aktuális sheetével
        b = (BeSheet) m.jTabbedPane1.getComponentAt(m.jTabbedPane1.getSelectedIndex());
        jComboBox1.removeAllItems();
        for (int i = 0; i < b.jPanel2.getComponentCount(); i++) {

            if (b.jPanel2.getComponent(i) instanceof VerticalTimeline) {
                VerticalTimeline vt = (VerticalTimeline) b.jPanel2.getComponent(i);

                jComboBox1.addItem(vt.getVtstartdate());

            }

        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    public static javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    public static javax.swing.JTabbedPane jTabbedPane1;
    public static javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    public static javax.swing.JTextField jTextField1;
    public static javax.swing.JTextPane jTextPane1;
    // End of variables declaration//GEN-END:variables

}
